setGeneric("NormDetails<-", function(object,value) standardGeneric("NormDetails<-"))
setReplaceMethod("NormDetails",signature(object="RNAseq",value="list"),
function(object,value){
object@NormDetails <- value
return(object)
}
)
setGeneric("cellsQC", function(object) standardGeneric("cellsQC"))
setMethod("cellsQC", "RNAseq", function(object) object@cellsQC)
setGeneric("cellsQC<-", function(object,value) standardGeneric("cellsQC<-"))
setReplaceMethod("cellsQC",signature(object="RNAseq",value="vector"),
function(object,value){
object@cellsQC <- value
return(object)
}
)
setGeneric("pca", function(object) standardGeneric("pca"))
setMethod("pca", "RNAseq", function(object) object@pca)
setGeneric("pca<-", function(object,value) standardGeneric("pca<-"))
setReplaceMethod("pca",signature(object="RNAseq",value="ANY"),
function(object,value){
object@pca <- value
return(object)
}
)
setGeneric("tsne", function(object) standardGeneric("tsne"))
setMethod("tsne", "RNAseq", function(object) object@tsne)
setGeneric("tsne<-", function(object,value) standardGeneric("tsne<-"))
setReplaceMethod("tsne",signature(object="RNAseq",value="ANY"),
function(object,value){
object@tsne <- value
return(object)
}
)
setGeneric("diffmap", function(object) standardGeneric("diffmap"))
setMethod("diffmap", "RNAseq", function(object) object@diffmap)
setGeneric("diffmap<-", function(object,value) standardGeneric("diffmap<-"))
setReplaceMethod("diffmap",signature(object="RNAseq",value="ANY"),
function(object,value){
object@diffmap <- value
return(object)
}
)
setGeneric("clustering", function(object) standardGeneric("clustering"))
setMethod("clustering", "RNAseq", function(object) object@clustering)
setGeneric("clustering<-", function(object,value) standardGeneric("clustering<-"))
setReplaceMethod("clustering",signature(object="RNAseq",value="ANY"),
function(object,value){
object@clustering <- value
return(object)
}
)
setMethod("show",
"RNAseq",
function(object) {
cat("Object of class",class(object),"\n")
cat("It contains space for:\n")
cat("  countsRaw (",class(object@countsRaw),"): matrix of raw counts (genes x cells).\n")
cat("  metadata (",class(object@metadata),"): matrix of metadata of all cells and genes (cells x features).\n")
cat("  countsNorm (",class(object@countsNorm),"): matrix of normalised counts (genes x cells). \n")
cat("  NormDetails (",class(object@countsNorm),"): Contains information about the NormDetails procedure.\n")
cat("  cellsQC (",class(object@cellsQC),"): List of cells that have passed QC. \n")
cat("  pca (",class(object@pca),"): If not NULL, contains PCA results. \n")
cat("  tsne (",class(object@tsne),"):If not NULL, contains tSNE results. \n")
cat("  diffmap (",class(object@diffmap),"): If not NULL, contains diffusion map results. \n")
cat("  clustering (",class(object@clustering),"): If not NULL, contains information about potential clustering. \n")
})
show(data_try)
setGeneric("runPCA", function(dataset,normalised="yes",...) standardGeneric("runPCA"))
setMethod("runPCA", "RNAseq",
function(dataset,normalised="yes",...) {
if (normalised=="yes"){
x = dataset@countsNorm
if(is.null(x)==FALSE){
pca_x = prcomp(x,...)
} else {
print("Normalised counts matrix not available.")
}
} else if (normalised=="no"){
x = dataset@countsRaw
if(is.null(x)==FALSE){
pca_x = prcomp(x, ...)
} else {
print("countsRaw matrix not available.")
}
} else {
print("The parameter called 'normalised' cannot be recognised. Please enter 'yes' or 'no'.")
}
return(pca_x)
}
)
setGeneric("runtSNE", function(dataset,normalised="yes",...) standardGeneric("runtSNE"))
setMethod("runtSNE", "RNAseq",
function(dataset,normalised="yes",...) {
require(Rtsne)
if (normalised=="yes"){
x = dataset@countsNorm
if(is.null(x)==FALSE){
tsne_x = Rtsne(t(x),...)
} else {
print("Normalised counts matrix not available.")
}
} else if (normalised=="no"){
x = dataset@countsRaw
if(is.null(x)==FALSE){
tsne_x = Rtsne(t(x),...)
} else {
print("countsRaw matrix not available.")
}
} else {
print("The parameter called 'normalised' cannot be recognised. Please enter 'yes' or 'no'.")
}
return(tsne_x)
}
)
setGeneric("runDifMap", function(dataset,normalised="yes",...) standardGeneric("runDifMap"))
setMethod("runDifMap", "RNAseq",
function(dataset,normalised="yes",...) {
require(destiny)
if (normalised=="yes"){
x = dataset@countsNorm
if(is.null(x)==FALSE){
if(exists("sigma")){
dif_x = DiffusionMap(t(x),...)
} else {
sigmas <- find.sigmas(t(x), verbose = FALSE)
dif_x = DiffusionMap(t(x),sigma=optimal.sigma(sigmas),...)
}
} else {
print("Normalised counts matrix not available.")
}
} else if (normalised=="no"){
x = dataset@countsRaw
if(is.null(x)==FALSE){
if(exists("sigma")){
dif_x = DiffusionMap(t(x),...)
} else {
sigmas <- find.sigmas(t(x), verbose = FALSE)
dif_x = DiffusionMap(t(x),sigma=optimal.sigma(sigmas),...)
}
} else {
print("countsRaw matrix not available.")
}
} else {
print("The parameter called 'normalised' cannot be recognised. Please enter 'yes' or 'no'.")
}
return(dif_x)
}
)
tsne(data_try)<- runPCA(data_try,normalised = "no")
pca(data_try)<- runPCA(data_try,normalised = "no")
diffmap(data_try)<- runDifMap(data_try,normalised = "no")
diffmap(data_try)
data_try@diffmap@eigenvalues
data_try@diffmap@data.env
data_try@diffmap@sigmas
data_try@diffmap@density.norm
data_try@diffmap@eigenvectors
data_try
data_try@countsRaw
data_try@diffmap@sigmas
data_try@diffmap@sigma
data_try@diffmap@sigmas
dif_map_try=DiffusionMap(counts_try)
data_try@diffmap <- dif_map_try
data_try@diffmap@sigmas
counts_try= matrix(data=matrix(rexp(200, rate=.1), ncol=20)
)
head(counts_try
)
dim(counts_try)
counts_try= matrix(rexp(200, rate=.1), ncol=20))
counts_try= matrix(rexp(200, rate=.1), ncol=20)
dim(counts_try)
metadata_try= matrix(rexp(200, rate=.1), nrow=20)
dim(metadata_try)
counts_try= matrix(rexp(200, rate=.1), ncol=20)
colnames(counts_try) = c("cell1","cell3")
metadata_try= matrix(rexp(200, rate=.1), nrow=10)
rownames(metadata_try) = c("cell1","cell2")
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
counts_try= matrix(rexp(200, rate=.1), ncol=20)
metadata_try= matrix(rexp(200, rate=.1), nrow=10)
num_cells = 20
counts_try= matrix(rexp(200, rate=.1), ncol=num_cells)
metadata_try= matrix(rexp(200, rate=.1), nrow=num_cells)
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
pca_try=prcomp(counts_try)
num_cells = 20
counts_try= matrix(rexp(200, rate=.1), ncol=num_cells)
metadata_try= matrix(rexp(200, rate=.1), nrow=10)
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
num_cells = 20
counts_try= matrix(rexp(200, rate=.1), ncol=num_cells)
metadata_try= matrix(rexp(200, rate=.1), nrow=num_cells)
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
pca_try=prcomp(counts_try)
data_try@pca <- pca_try
tsne_try=Rtsne(counts_try,perplexity=1)
data_try@tsne <- tsne_try
dif_map_try=DiffusionMap(counts_try)
data_try@diffmap <- dif_map_try
diffmap(data_try)<- runDifMap(data_try,normalised = "no")
data_try@diffmap@sigmas
data_try@diffmap@eigenvectors
data_try@diffmap@sigmas@optimal.sigma
diffmap(data_try)<- runDifMap(data_try,normalised = "no",sigma=0.1)
diffmap(data_try)<- runDifMap(data_try,normalised = "no",sigma=20)
data_try@diffmap@sigmas@optimal.sigma
data_try@diffmap@sigmas@avrd.norms
tsne(data_try)<- runtSNE(data_try,normalised = "no")
tsne(data_try)<- runtSNE(data_try,normalised = "no",perplexity=10)
tsne(data_try)<- runtSNE(data_try,normalised = "no",perplexity=1)
tsne(data_try)<- runtSNE(data_try,normalised = "no",perplexity=10)
tsne(data_try)<- runtSNE(data_try,normalised = "no",perplexity=5)
data_try@tsne
data_try@tsne$perplexity
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/inst/extdata/")
geneTable <- read.csv("mart_export.txt")
#save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/bioSeq/data/geneTable.rda")
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx("surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table B")
cellSurfaceGenes_human <- read.xlsx("surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table A")
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/R/")
library(devtools)
install.packages('devtools')
devtools::use_data(cellSurfaceGenes_mouse, cellSurfaceGenes_human,geneTable, internal = TRUE)
devtools::use_data(cellSurfaceGenes_mouse, cellSurfaceGenes_human,geneTable, internal = TRUE)
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/inst/extdata/")
geneTable <- read.csv("mart_export.txt")
save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/data/geneTable.rda")
library(xlsx)
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/inst/extdata/")
geneTable <- read.csv("mm10_mart_export.txt")
#save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/data/geneTable.rda")
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/R/")
library(devtools)
devtools::use_data(geneTable, internal = TRUE)
devtools::use_data(geneTable, internal = TRUE,overwrite=TRUE)
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/inst/extdata/")
geneTable <- read.csv("mm10_mart_export.txt")
save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/data/geneTable.rda")
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
###SAVE INTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
#save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/data/geneTable.rda")
setwd(paste0(wd,"R/"))
library(devtools)
devtools::use_data(geneTable, internal = TRUE,overwrite=TRUE)
###SAVE EXTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table B"))
save(cellSurfaceGenes_mouse, file=paste0(wd,"data/cellSurfaceGenes_mouse.rda"))
cellSurfaceGenes_human <- read.xlsx(paste0(wd,"int/extdata/surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table A"))
save(cellSurfaceGenes_human, file=paste0(wd,"data/cellSurfaceGenes_human.rda"))
###SAVE EXTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
###SAVE EXTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table B"))
save(cellSurfaceGenes_mouse, file=paste0(wd,"data/cellSurfaceGenes_mouse.rda"))
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table B")
save(cellSurfaceGenes_mouse, file=paste0(wd,"data/cellSurfaceGenes_mouse.rda"))
cellSurfaceGenes_human <- read.xlsx(paste0(wd,"int/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table A")
save(cellSurfaceGenes_human, file=paste0(wd,"data/cellSurfaceGenes_human.rda"))
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table B")
###SAVE EXTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table B")
save(cellSurfaceGenes_mouse, file=paste0(wd,"data/cellSurfaceGenes_mouse.rda"))
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table B")
#proSeq
setwd("/Users/blancap/Documents/repos_bitbucket/r-packages/00.PACKAGES/proSeq_development/proSeq")
roxygen2::roxygenize()
#proSeq
setwd("/Users/blancap/Documents/repos_bitbucket/r-packages/00.PACKAGES/proSeq_development/proSeq")
roxygen2::roxygenize()
#proSeq
setwd("/Users/blancap/Documents/repos_bitbucket/r-packages/00.PACKAGES/proSeq_development/proSeq")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
#title: "Chimeras in 10X embryo data"
#author: "Blanca Pijuan-Sala"
#date: "27 September 2018"
#############################################
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/Experiments/"
heatmapRedYelBlue <- c("#A50026", "#D73027", "#F46D43", "#FDAE61", "#FEE090",
"#FFFFBF", "#E0F3F8", "#ABD9E9", "#74ADD1", "#4575B4", "#313695")
heatmapOrangeGrad <- rev(c("#fef0d9","#fdd49e","#fdbb84","#fc8d59","#e34a33",
"#b30000"))
heatmapColsBW <- rev(c("#ffffff",
"#f0f0f0",
"#d9d9d9",
"#bdbdbd",
"#969696",
"#737373",
"#525252",
"#252525"))
palette <- colorRampPalette(rev(heatmapRedYelBlue))
bluePal <- c("#BFBFBF","#6495ED","#000000")
redPal <- c("gray","#ff6666","#e60000","#990000")
all_colours = c(
"Allantois" = "#532C8A",#[32] "Allantois"
"Anterior Primitive Streak" = "#c19f70",
"Blood progenitors 1" = "#f9decf",
"Blood progenitors 2" = "#c9a997",
"Cardiomyocytes" =  "#B51D8D",#[34] "Cardiomyocytes"
"Caudal epiblast" = "#9e6762",
"Caudal Mesoderm" = "#3F84AA",
#"Caudal Primitive Streak epiblast"= "#702f1f",
"Def. endoderm" = "#F397C0",#[24] "Def. endoderm"
"Nascent mesoderm" =  "#C594BF",#[7] "Early mixed mesoderm"
"Mixed mesoderm" =  "#DFCDE4",#[26] "Early ExE mesoderm"
"Endothelium" =  "#eda450",#[20] "Endothelium"
"Epiblast" =  "#635547",#[1] "Epiblast"
"Erythroid1" =  "#C72228",#[15] "Erythroid 1"
"Erythroid2" =  "#EF4E22",#[37] "Erythroid2"
"Erythroid3" =  "#f77b59",
"ExE ectoderm" =  "#989898",#[30] "ExE ectoderm 1"
"ExE endoderm" = "#7F6874",#[5] "ExE endoderm"
"ExE mesoderm" =  "#8870ad",#[12] "ExE mesoderm"
"Rostral neurectoderm" =  "#65A83E",#[8] "Forebrain"
"Forebrain/Midbrain/Hindbrain" = "#647a4f",
"Gut" =  "#EF5A9D",#[19] "Foregut"
"Haematoendothelial progenitors" =  "#FBBE92",#[9] "Hemato-endothelial progenitors"
"Caudal neurectoderm"= "#354E23",
"Intermediate mesoderm" =  "#139992",#[31] "Intermediate mesoderm"
"Neural crest"= "#C3C388",
"NMP" =  "#8EC792",#[14] "NMPs"
"Notochord" =  "#0F4A9C",#[21] "Notochord"
"Paraxial mesoderm" =  "#8DB5CE",#[33] "Late paraxial mesoderm (presomitic mesoderm)"
"Parietal endoderm" =  "#1A1A1A",#[29] "Parietal endoderm"
"PGC" =  "#FACB12",#[25] "PGC"
"Pharyngeal mesoderm" =  "#C9EBFB",#[13] "Late mixed mesoderm"
"Primitive Streak" =  "#DABE99",#[2] "Primitive Streak"
"Mesenchyme" = "#ed8f84",
"Somitic mesoderm" =  "#005579",#[16] "Somites"
"Spinal cord" =  "#CDE088",#[38] "Spinal cord"
"Surface ectoderm" = "#BBDCA8",#[22] "Surface ectoderm"
"Visceral endoderm" = "#F6BFCB",#[3] "Visceral endoderm"
"turquoise" =  "turquoise",
"red"="red",
"magenta" =   "magenta",
"black" ="black"   ,
"brown"="brown"   ,
"purple" ="purple"  ,
"blue"="blue",
"pink"="pink",
"greenyellow"="greenyellow"  ,
"green"   ="green" ,
"yellow"="yellow"
)
all_colours_sub = c(
"Mes1"= "#c4a6b2",#
"Mes2"= "#ca728c",#
"Cardiomyocytes" =  "#B51D8D",#[34] "Cardiomyocytes"
"BP1" = "#6460c5",#
"BP2" = "#96b8e4",#
"Haem3"= "#02f9ff",#changed
"BP3" = "#07499f",#changed
"BP4" = "#036ef9",#changed
#"BP6"  = "#03bbf9",
"Haem1"= "#bb22a7",
"Haem2" = "#f695e9",
"Haem4" = "#4c4a81",#changed
"EC1"= "#006737",#
"EC2" = "#5eba46",#
"EC3" = "#818068",#
"EC4"="#d6de22",#
"EC5"="#5f7238",#
"EC6"="#2ab572",#
"EC7"="#000000",#
"EC8"="#a0cb3b",#
"Ery1"="#f67a58",#
"Ery2" ="#a26724",#
"Ery3"="#cdaf7f",#
"Ery4"= "#625218",#
"My" = "#c62127" ,#
"Mk"= "#f6931d"#
)
stagePal <- c(
"E6.5" ="#E3FCFA",
"E6.75" = "#C1ECEF",
"E7.0" ="#A3D4E3",
"E7.25" ="#86B8D6",
"E7.5"="#6C98CA",
"E7.75"="#5476BE",
"E8.0"="#3E52B1",
"E8.25"="#2B2DA5",
"E8.5"="#2B1999",
"mixed_gastrulation"="gray"
)
spectralPal = c(
'E6.5'="#D53E4F",
'E6.75'="#F46D43",
'E7.0'="#FDAE61",
'E7.5'="#FFFFBF",
'E7.25'="#FEE08B",
'E7.75'="#E6F598",
'E8.0'="#ABDDA4",
'E8.5'="#3288BD",
'E8.25'="#66C2A5",
'mixed_gastrulation'= "#A9A9A9"
)
plotGeneLevelsLocal <- function(data, x, y, gene, cols=c("#BFBFBF","#6495ED","#000000"),
xlab="x",ylab="y",titlePlot=gene,cexType=1,ybsub=0.1){
redRamp <- colorRampPalette(cols)
df <- data.frame(x = x, y = y, exp = data[gene,])
df <- df[order(df$exp,decreasing=F),]
dfsub <- df[df$exp>0,]
interval <- findInterval(dfsub$exp, seq(min(dfsub$exp),
max(dfsub$exp),
(max(dfsub$exp)-min(dfsub$exp))/10))
interval[interval==0]<-1
colorsPlot <- redRamp(11)[interval]
par(mar=c(8,4,8,4),xpd=NA)
plot(df$x, df$y, col=cols[1], pch=20, cex=cexType,
xlab="", ylab="", main=titlePlot, axes=F, cex.main=1.5)
box(bty="l")
points(dfsub$x, dfsub$y, pch=20, cex=cexType,
col=colorsPlot)
}
meta <- read.table(paste0(wd,"PhD_BPS32/release6/data/metadata_allcells_subclust3_20181006.tab"), header = T, stringsAsFactors = F, sep = "\t")
rownames(meta) <- meta$index
meta$cell <- meta$index
metaSub <- read.table(file=paste0(wd,"PhD_BPS32/release6/data/metadata_subclusters_bloodLineage_v3_20180910.tab"),
sep="\t",header=T)
rownames(metaSub) <- metaSub$cell
metaSub$celltype_new <- as.character(metaSub$celltype_new)
metaTal1 <- read.table(paste0(wd,"PhD_BPS46/release2/data/chimera-tal1/data/meta.tab"), header = T, stringsAsFactors = F, sep = "\t")
rownames(metaTal1) <- metaTal1$cell
metaTal1Sub <- metaTal1[as.character(metaTal1$celltype.mapped)%in%as.character(unique(metaSub$celltype_new)),]
table(metaTal1Sub$tomato)
closestCells <- read.table(paste0(wd,"PhD_BPS46/release2/data/chimera-tal1/data/blood_lineage_bloodlineage_nearestneighbours.tab"), header = F, stringsAsFactors = F, sep = "\t")
colnames(closestCells)<- c("chimera",paste0("atlas",seq(1:10)))
rownames(closestCells)<- closestCells$chimera
length(closestCells$atlas1)
length(unique(closestCells$atlas1))
metaTal1Sub <- cbind(metaTal1Sub,closestCells[rownames(metaTal1Sub),])
metaTal1Sub$subclust3 <- metaSub[as.character(metaTal1Sub$atlas1),'subclust3']
metaTal1$subclust3 <- as.character(metaTal1$celltype.mapped)
metaTal1[rownames(metaTal1Sub),"subclust3"] <-  as.character(metaSub[as.character(metaTal1Sub$atlas1),'subclust3'])
countsTal1 <- readRDS(paste0(wd,"PhD_BPS46/release2/data/chimera-tal1/data/raw_counts.rds"))
sceTal1 <- SingleCellExperiment::SingleCellExperiment(assays=c("counts"=countsTal1))
SingleCellExperiment::sizeFactors(sceTal1)<-as.numeric(as.character(read.table(paste0(wd,"PhD_BPS46/release2/data/chimera-tal1/data/sizefactors.tab"))[,1]))
sceTal1 <- scater::normalize(sceTal1)
rownames(sceTal1)<- (as.character(read.table(paste0(wd,"PhD_BPS46/release2/data/chimera-tal1/data/genes.tsv"))[,1]))
colnames(sceTal1) <- rownames(metaTal1)
counts <- as.matrix(Matrix::readMM(file=paste0(wd,"PhD_BPS32/release6/data/20180908_countsBlood.mtx")))
#markerschimEC <- anSeq::findMarkers(countsEC3all[,names(groups)],groups=groups,groupTarget = 'chimKO')
#markerschimEC$geneNames <- anSeq::getGeneName(rownames(markerschimEC))[[2]]
#save(markerschimEC,file=paste0(wd,"PhD_BPS46/release2/rda/markerschimEC_2.rda"))
load(paste0(wd,"PhD_BPS46/release2/rda/markerschimEC_2.rda"))
#title: "Chimeras in 10X embryo data"
#author: "Blanca Pijuan-Sala"
#date: "27 September 2018"
#############################################
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/Experiments/"
#save(markerschimCM,file=paste0(wd,"PhD_BPS46/release2/rda/markerschimCM.rda"))
#xlsx::write.xlsx(markerschimCM,
#              file=paste0(wd,"PhD_BPS46/release2/EC3_comparetoCM_20180929.xlsx"),append=F)
load(paste0(wd,"PhD_BPS46/release2/rda/markerschimCM.rda"))
#save(markerschimCMat,file=paste0(wd,"PhD_BPS46/release2/rda/markerschimCMat.rda"))
#xlsx::write.xlsx(markerschimCMat,
#              file=paste0(wd,"PhD_BPS46/release2/markerschimCMat_20180929.xlsx"),append=F)
load(paste0(wd,"PhD_BPS46/release2/rda/markerschimCMat.rda"))
#save(markerschimOnly,file=paste0(wd,"PhD_BPS46/release2/rda/markerschimOnly.rda"))
#xlsx::write.xlsx(markerschimOnly,
#              file=paste0(wd,"PhD_BPS46/release2/markerschimOnly_20180929.xlsx"),append=F)
load(paste0(wd,"PhD_BPS46/release2/rda/markerschimOnly.rda"))
genesSelEC <- rownames(markerschimCMat)[markerschimCMat$logFC>2.9]
genesSelCM <- rownames(markerschimCMat)[markerschimCMat$logFC<(-2.9)]
genesSelECchim <- rownames(markerschimEC)[markerschimEC$logFC>=2]
#markerschimEC <- anSeq::findMarkers(countsEC3all[,names(groups)],groups=groups,groupTarget = 'chimKO')
#markerschimEC$geneNames <- anSeq::getGeneName(rownames(markerschimEC))[[2]]
#save(markerschimEC,file=paste0(wd,"PhD_BPS46/release2/rda/markerschimEC_2.rda"))
load(paste0(wd,"PhD_BPS46/release2/rda/markerschimEC_2.rda"))
genesSelECchim <- rownames(markerschimEC)[markerschimEC$logFC>=2]
genesSelCHIMchim <- rownames(markerschimOnly)[markerschimOnly$logFC>(2)]
genesSelCHIMchim
anSeq::getGeneName(genesSelCHIMchim)
anSeq::getGeneName(genesSelECchim)
anSeq::getGeneName(rownames(markerschimEC)[markerschimEC$logFC>=1.5])
anSeq::getGeneName(rownames(markerschimOnly)[markerschimOnly$logFC>=1.5])
c("Pcolce", "Tdo2", "Plagl1") %in% anSeq::getGeneName(rownames(markerschimOnly)[markerschimOnly$logFC>=1.5])
c("Pcolce", "Tdo2", "Plagl1") %in% anSeq::getGeneName(rownames(markerschimOnly)[markerschimOnly$logFC>=1.5])[[2]]
c("Pcolce", "Tdo2", "Plagl1") %in% anSeq::getGeneName(rownames(markerschimEC)[markerschimEC$logFC>=1.5])[[2]]
markerschimEC[anSeq::getGeneID(c("Pcolce", "Tdo2", "Plagl1"))[[2]],]
markerschimOnly[anSeq::getGeneID(c("Pcolce", "Tdo2", "Plagl1"))[[2]],]
