#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
return(isValid)
}
}
)
#trying:
counts_try= matrix(data=c(1,2,3,4),ncol=2)
colnames(counts_try) = c("cell1","cell3")
metadata_try= matrix(data=c("a", "b", "c", "d","e","f"),nrow=2)
rownames(metadata_try) = c("cell1","cell2")
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
require(Rtsne)
require(destiny)
setClassUnion("dataframeORmatrix",c("data.frame","matrix"))
setClassUnion("S3orS4",c("S3","S4"))
setClass("RNAseq",representation = representation(
countsRaw="matrix",
metadata="matrix",
countsNorm="matrix",
NormDetails="list",
#it must include (1) sizeFactors="vector", (2) function used to normalised and (3) cells used.
cellsQC="vector",#this includes cells that pass QC.
pca="ANY",
#output of prcomp or printcomp
tsne="list",
#output of Rtsne
diffmap="ANY",
#output of diffusion map
clustering="ANY"
#Apart from the clustering out, the slot must contain at least: (1) vector of cluster numbers and named by cells
# and (2) type of clustering (simple vector with name), (3) parameters: vector with values
## named by the parameter names.
),
validity = function(object) {
isValid <- TRUE
if ((exists("object@countsNorm") & exists("object@metadata"))==TRUE) {
if (length(which(colnames(object@countsNorm) %in% rownames(object@metadata))==FALSE) > 0) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
if (ncol(object@countsNorm) > nrow(object@metadata)) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
}
if ((exists("object@countsRaw") & exists("object@metadata"))==TRUE) {
cat("hello")
if (length(!which(colnames(object@countsRaw) %in% rownames(object@metadata))) > 0) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
return(isValid)
}
}
)
#trying:
counts_try= matrix(data=c(1,2,3,4),ncol=2)
colnames(counts_try) = c("cell1","cell3")
metadata_try= matrix(data=c("a", "b", "c", "d","e","f"),nrow=2)
rownames(metadata_try) = c("cell1","cell2")
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
require(Rtsne)
require(destiny)
setClassUnion("dataframeORmatrix",c("data.frame","matrix"))
setClassUnion("S3orS4",c("S3","S4"))
setClass("RNAseq",representation = representation(
countsRaw="matrix",
metadata="matrix",
countsNorm="matrix",
NormDetails="list",
#it must include (1) sizeFactors="vector", (2) function used to normalised and (3) cells used.
cellsQC="vector",#this includes cells that pass QC.
pca="ANY",
#output of prcomp or printcomp
tsne="list",
#output of Rtsne
diffmap="ANY",
#output of diffusion map
clustering="ANY"
#Apart from the clustering out, the slot must contain at least: (1) vector of cluster numbers and named by cells
# and (2) type of clustering (simple vector with name), (3) parameters: vector with values
## named by the parameter names.
),
validity = function(object) {
isValid <- TRUE
if ((exists("object@countsNorm") & exists("object@metadata"))==TRUE) {
if (length(which(colnames(object@countsNorm) %in% rownames(object@metadata))==FALSE) > 0) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
if (ncol(object@countsNorm) > nrow(object@metadata)) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
}
if ((exists("object@countsRaw") & exists("object@metadata"))==TRUE) {
cat("hello")
if (length(!which(colnames(object@countsRaw) %in% rownames(object@metadata))) > 0) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
return(isValid)
}
}
)
#trying:
counts_try= matrix(data=c(1,2,3,4),ncol=2)
colnames(counts_try) = c("cell1","cell3")
metadata_try= matrix(data=c("a", "b", "c", "d","e","f"),nrow=2)
rownames(metadata_try) = c("cell1","cell2")
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
require(Rtsne)
require(destiny)
setClassUnion("dataframeORmatrix",c("data.frame","matrix"))
setClassUnion("S3orS4",c("S3","S4"))
setClass("RNAseq",representation = representation(
countsRaw="matrix",
metadata="matrix",
countsNorm="matrix",
NormDetails="list",
#it must include (1) sizeFactors="vector", (2) function used to normalised and (3) cells used.
cellsQC="vector",#this includes cells that pass QC.
pca="ANY",
#output of prcomp or printcomp
tsne="list",
#output of Rtsne
diffmap="ANY",
#output of diffusion map
clustering="ANY"
#Apart from the clustering out, the slot must contain at least: (1) vector of cluster numbers and named by cells
# and (2) type of clustering (simple vector with name), (3) parameters: vector with values
## named by the parameter names.
),
validity = function(object) {
isValid <- TRUE
if ((exists("object@countsNorm") & exists("object@metadata"))==TRUE) {
if (length(which(colnames(object@countsNorm) %in% rownames(object@metadata))==FALSE) > 0) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
if (ncol(object@countsNorm) > nrow(object@metadata)) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
}
if ((exists("object@countsRaw") & exists("object@metadata"))==TRUE) {
cat("hello")
if ((length(!which(colnames(object@countsRaw) %in% rownames(object@metadata))) > 0)==TRUE) {
isValid <- FALSE
cat("Not all the cells in countsNorm have metadata.")
#cat("The number of cells in the metadata (rows) is not the same as the number
#    of cells in the counts matrix (columns). Please introduce all the cells for these
#    two slots.\n")
}
return(isValid)
}
}
)
#trying:
counts_try= matrix(data=c(1,2,3,4),ncol=2)
colnames(counts_try) = c("cell1","cell3")
metadata_try= matrix(data=c("a", "b", "c", "d","e","f"),nrow=2)
rownames(metadata_try) = c("cell1","cell2")
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
if ((length(!which(colnames(counts_try) %in% rownames(metadata_try))) > 0)==TRUE) {
cat("Not all the cells in countsNorm have metadata.")}
setGeneric("countsRaw", function(object) standardGeneric("countsRaw"))
setMethod("countsRaw", "RNAseq", function(object) object@countsRaw)
setGeneric("counts<-", function(object,value) standardGeneric("counts<-"))
setReplaceMethod("counts",signature(object="RNAseq",value="matrix"),
function(object,value){
object@counts <- value
return(object)
}
)
setGeneric("metadata", function(object) standardGeneric("metadata"))
setMethod("metadata", "RNAseq", function(object) object@metadata)
setGeneric("metadata<-", function(object,value) standardGeneric("metadata<-"))
setReplaceMethod("metadata",signature(object="RNAseq",value="matrix"),
function(object,value){
object@metadata <- value
return(object)
}
)
setGeneric("countsNorm", function(object) standardGeneric("countsNorm"))
setMethod("countsNorm", "RNAseq", function(object) object@countsNorm)
setGeneric("countsNorm<-", function(object,value) standardGeneric("countsNorm<-"))
setReplaceMethod("countsNorm",signature(object="RNAseq",value="matrix"),
function(object,value){
object@countsNorm <- value
return(object)
}
)
setGeneric("NormDetails", function(object) standardGeneric("NormDetails"))
setMethod("NormDetails", "RNAseq", function(object) object@NormDetails)
setGeneric("NormDetails<-", function(object,value) standardGeneric("NormDetails<-"))
setReplaceMethod("NormDetails",signature(object="RNAseq",value="list"),
function(object,value){
object@NormDetails <- value
return(object)
}
)
setGeneric("cellsQC", function(object) standardGeneric("cellsQC"))
setMethod("cellsQC", "RNAseq", function(object) object@cellsQC)
setGeneric("cellsQC<-", function(object,value) standardGeneric("cellsQC<-"))
setReplaceMethod("cellsQC",signature(object="RNAseq",value="vector"),
function(object,value){
object@cellsQC <- value
return(object)
}
)
setGeneric("pca", function(object) standardGeneric("pca"))
setMethod("pca", "RNAseq", function(object) object@pca)
setGeneric("pca<-", function(object,value) standardGeneric("pca<-"))
setReplaceMethod("pca",signature(object="RNAseq",value="ANY"),
function(object,value){
object@pca <- value
return(object)
}
)
setGeneric("tsne", function(object) standardGeneric("tsne"))
setMethod("tsne", "RNAseq", function(object) object@tsne)
setGeneric("tsne<-", function(object,value) standardGeneric("tsne<-"))
setReplaceMethod("tsne",signature(object="RNAseq",value="ANY"),
function(object,value){
object@tsne <- value
return(object)
}
)
setGeneric("diffmap", function(object) standardGeneric("diffmap"))
setMethod("diffmap", "RNAseq", function(object) object@diffmap)
setGeneric("diffmap<-", function(object,value) standardGeneric("diffmap<-"))
setReplaceMethod("diffmap",signature(object="RNAseq",value="ANY"),
function(object,value){
object@diffmap <- value
return(object)
}
)
setGeneric("clustering", function(object) standardGeneric("clustering"))
setMethod("clustering", "RNAseq", function(object) object@clustering)
setGeneric("clustering<-", function(object,value) standardGeneric("clustering<-"))
setReplaceMethod("clustering",signature(object="RNAseq",value="ANY"),
function(object,value){
object@clustering <- value
return(object)
}
)
setMethod("show",
"RNAseq",
function(object) {
cat("Object of class",class(object),"\n")
cat("It contains space for:\n")
cat("  countsRaw (",class(object@countsRaw),"): matrix of raw counts (genes x cells).\n")
cat("  metadata (",class(object@metadata),"): matrix of metadata of all cells and genes (cells x features).\n")
cat("  countsNorm (",class(object@countsNorm),"): matrix of normalised counts (genes x cells). \n")
cat("  NormDetails (",class(object@countsNorm),"): Contains information about the NormDetails procedure.\n")
cat("  cellsQC (",class(object@cellsQC),"): List of cells that have passed QC. \n")
cat("  pca (",class(object@pca),"): If not NULL, contains PCA results. \n")
cat("  tsne (",class(object@tsne),"):If not NULL, contains tSNE results. \n")
cat("  diffmap (",class(object@diffmap),"): If not NULL, contains diffusion map results. \n")
cat("  clustering (",class(object@clustering),"): If not NULL, contains information about potential clustering. \n")
})
show(data_try)
setGeneric("runPCA", function(dataset,normalised="yes",...) standardGeneric("runPCA"))
setMethod("runPCA", "RNAseq",
function(dataset,normalised="yes",...) {
if (normalised=="yes"){
x = dataset@countsNorm
if(is.null(x)==FALSE){
pca_x = prcomp(x,...)
} else {
print("Normalised counts matrix not available.")
}
} else if (normalised=="no"){
x = dataset@countsRaw
if(is.null(x)==FALSE){
pca_x = prcomp(x, ...)
} else {
print("countsRaw matrix not available.")
}
} else {
print("The parameter called 'normalised' cannot be recognised. Please enter 'yes' or 'no'.")
}
return(pca_x)
}
)
setGeneric("runtSNE", function(dataset,normalised="yes",...) standardGeneric("runtSNE"))
setMethod("runtSNE", "RNAseq",
function(dataset,normalised="yes",...) {
require(Rtsne)
if (normalised=="yes"){
x = dataset@countsNorm
if(is.null(x)==FALSE){
tsne_x = Rtsne(t(x),...)
} else {
print("Normalised counts matrix not available.")
}
} else if (normalised=="no"){
x = dataset@countsRaw
if(is.null(x)==FALSE){
tsne_x = Rtsne(t(x),...)
} else {
print("countsRaw matrix not available.")
}
} else {
print("The parameter called 'normalised' cannot be recognised. Please enter 'yes' or 'no'.")
}
return(tsne_x)
}
)
setGeneric("runDifMap", function(dataset,normalised="yes",...) standardGeneric("runDifMap"))
setMethod("runDifMap", "RNAseq",
function(dataset,normalised="yes",...) {
require(destiny)
if (normalised=="yes"){
x = dataset@countsNorm
if(is.null(x)==FALSE){
if(exists("sigma")){
dif_x = DiffusionMap(t(x),...)
} else {
sigmas <- find.sigmas(t(x), verbose = FALSE)
dif_x = DiffusionMap(t(x),sigma=optimal.sigma(sigmas),...)
}
} else {
print("Normalised counts matrix not available.")
}
} else if (normalised=="no"){
x = dataset@countsRaw
if(is.null(x)==FALSE){
if(exists("sigma")){
dif_x = DiffusionMap(t(x),...)
} else {
sigmas <- find.sigmas(t(x), verbose = FALSE)
dif_x = DiffusionMap(t(x),sigma=optimal.sigma(sigmas),...)
}
} else {
print("countsRaw matrix not available.")
}
} else {
print("The parameter called 'normalised' cannot be recognised. Please enter 'yes' or 'no'.")
}
return(dif_x)
}
)
tsne(data_try)<- runPCA(data_try,normalised = "no")
pca(data_try)<- runPCA(data_try,normalised = "no")
diffmap(data_try)<- runDifMap(data_try,normalised = "no")
diffmap(data_try)
data_try@diffmap@eigenvalues
data_try@diffmap@data.env
data_try@diffmap@sigmas
data_try@diffmap@density.norm
data_try@diffmap@eigenvectors
data_try
data_try@countsRaw
data_try@diffmap@sigmas
data_try@diffmap@sigma
data_try@diffmap@sigmas
dif_map_try=DiffusionMap(counts_try)
data_try@diffmap <- dif_map_try
data_try@diffmap@sigmas
counts_try= matrix(data=matrix(rexp(200, rate=.1), ncol=20)
)
head(counts_try
)
dim(counts_try)
counts_try= matrix(rexp(200, rate=.1), ncol=20))
counts_try= matrix(rexp(200, rate=.1), ncol=20)
dim(counts_try)
metadata_try= matrix(rexp(200, rate=.1), nrow=20)
dim(metadata_try)
counts_try= matrix(rexp(200, rate=.1), ncol=20)
colnames(counts_try) = c("cell1","cell3")
metadata_try= matrix(rexp(200, rate=.1), nrow=10)
rownames(metadata_try) = c("cell1","cell2")
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
counts_try= matrix(rexp(200, rate=.1), ncol=20)
metadata_try= matrix(rexp(200, rate=.1), nrow=10)
num_cells = 20
counts_try= matrix(rexp(200, rate=.1), ncol=num_cells)
metadata_try= matrix(rexp(200, rate=.1), nrow=num_cells)
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
pca_try=prcomp(counts_try)
num_cells = 20
counts_try= matrix(rexp(200, rate=.1), ncol=num_cells)
metadata_try= matrix(rexp(200, rate=.1), nrow=10)
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
num_cells = 20
counts_try= matrix(rexp(200, rate=.1), ncol=num_cells)
metadata_try= matrix(rexp(200, rate=.1), nrow=num_cells)
data_try<- new("RNAseq", countsRaw=counts_try, metadata=metadata_try)
pca_try=prcomp(counts_try)
data_try@pca <- pca_try
tsne_try=Rtsne(counts_try,perplexity=1)
data_try@tsne <- tsne_try
dif_map_try=DiffusionMap(counts_try)
data_try@diffmap <- dif_map_try
diffmap(data_try)<- runDifMap(data_try,normalised = "no")
data_try@diffmap@sigmas
data_try@diffmap@eigenvectors
data_try@diffmap@sigmas@optimal.sigma
diffmap(data_try)<- runDifMap(data_try,normalised = "no",sigma=0.1)
diffmap(data_try)<- runDifMap(data_try,normalised = "no",sigma=20)
data_try@diffmap@sigmas@optimal.sigma
data_try@diffmap@sigmas@avrd.norms
tsne(data_try)<- runtSNE(data_try,normalised = "no")
tsne(data_try)<- runtSNE(data_try,normalised = "no",perplexity=10)
tsne(data_try)<- runtSNE(data_try,normalised = "no",perplexity=1)
tsne(data_try)<- runtSNE(data_try,normalised = "no",perplexity=10)
tsne(data_try)<- runtSNE(data_try,normalised = "no",perplexity=5)
data_try@tsne
data_try@tsne$perplexity
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/inst/extdata/")
geneTable <- read.csv("mart_export.txt")
#save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/bioSeq/data/geneTable.rda")
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx("surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table B")
cellSurfaceGenes_human <- read.xlsx("surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table A")
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/R/")
library(devtools)
install.packages('devtools')
devtools::use_data(cellSurfaceGenes_mouse, cellSurfaceGenes_human,geneTable, internal = TRUE)
devtools::use_data(cellSurfaceGenes_mouse, cellSurfaceGenes_human,geneTable, internal = TRUE)
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/inst/extdata/")
geneTable <- read.csv("mart_export.txt")
save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/data/geneTable.rda")
library(xlsx)
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/inst/extdata/")
geneTable <- read.csv("mm10_mart_export.txt")
#save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/data/geneTable.rda")
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/R/")
library(devtools)
devtools::use_data(geneTable, internal = TRUE)
devtools::use_data(geneTable, internal = TRUE,overwrite=TRUE)
setwd("/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/inst/extdata/")
geneTable <- read.csv("mm10_mart_export.txt")
save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/data/geneTable.rda")
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
###SAVE INTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
#save(geneTable, file="/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/proSeq_development/proSeq/data/geneTable.rda")
setwd(paste0(wd,"R/"))
library(devtools)
devtools::use_data(geneTable, internal = TRUE,overwrite=TRUE)
###SAVE EXTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table B"))
save(cellSurfaceGenes_mouse, file=paste0(wd,"data/cellSurfaceGenes_mouse.rda"))
cellSurfaceGenes_human <- read.xlsx(paste0(wd,"int/extdata/surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table A"))
save(cellSurfaceGenes_human, file=paste0(wd,"data/cellSurfaceGenes_human.rda"))
###SAVE EXTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
###SAVE EXTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx",sheetName = "Table B"))
save(cellSurfaceGenes_mouse, file=paste0(wd,"data/cellSurfaceGenes_mouse.rda"))
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table B")
save(cellSurfaceGenes_mouse, file=paste0(wd,"data/cellSurfaceGenes_mouse.rda"))
cellSurfaceGenes_human <- read.xlsx(paste0(wd,"int/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table A")
save(cellSurfaceGenes_human, file=paste0(wd,"data/cellSurfaceGenes_human.rda"))
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table B")
###SAVE EXTERNAL DATASET.
#http://r-pkgs.had.co.nz/data.html
wd <- "/Users/blancap/Documents/PhD_CAMBRIDGE/PhD/My_R_package/00.PACKAGES/anSeq_development/anSeq/"
geneTable <- read.csv(paste0(wd,"inst/extdata/mm10_mart_export.txt"))
save(geneTable, file=paste0(wd,"data/geneTable.rda"))
library(xlsx)
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table B")
save(cellSurfaceGenes_mouse, file=paste0(wd,"data/cellSurfaceGenes_mouse.rda"))
cellSurfaceGenes_mouse <- read.xlsx(paste0(wd,"inst/extdata/surfaceomeproteins_wlabethz_File.xlsx"),sheetName = "Table B")
